Hi everyone. Welcome back to the sectorial in this tutorial we'll talk about the reactor core library from the name of it. We can see this is the core library of project reactor. This library has the implementation of the reactive streams specification in order to work with the reactor core. You need at least Java 8 running in your machine. Let's dig deep and look at the implementation of the reactor stream's specification. We have seen this program in one of the previous video and we talked about how the reactor stream should flow and the different types of evens that are involved in it flux and model all the two classes which are the implementation of the reactor stream's specification in Project reactor. These are the only two classes which you need to know in order to work with Project reactor. These are the reactor types off project reactor flux is a class which represents 0 2 and elements. Mono is a class which represent a zero to one element. They talk about specific use cases on then to use mono and then to use flux in a bit. Let's start with flux the reactor types in Project reactor are explained using the module diagrams we have the marbles on the top and then operator in the middle and then module diagrams at the bottom. So the marble diagrams at the top represent the actual data and the operator in the middle represents the filtering transformation a lot of other operations to transform the data from its raw form to another form it goes through the operator layer one by one and then the marble diagram below represents the final output which will be sent to the subscriber. The vertical line here represents the on complete human meaning there is no more data. I'm done with the request. There is no more data to send to you and the X here at present. There is some kind of error happened in one of the ABO evens. To summarize the whole floor. So we have those marble diagrams at the top which is going to floor one by one which is going to be passed to the operator layer one by one and then the final output will be sent to the subscriber. Let's take a look at a quick example and then I will show you the documentation on this one. So the example here is like we have a flux of three elements. In reality we might be pulling this data from a database in our to give this example simple. I have this flux created using this just method. This is one of the ways we can create a flux. Don't worry about it for now we will be exploring all these in the coring examples. What happens is this flux has three elements and all these elements will be sent one by one. So the map here is one of the method which is part of the reactive API which is going to convert the spring to spring flux and springboard to springboard flux and then reactive springboard to react to springboard flux. Basically it upends the string flux to the elements in the flux and then we have the subscribe attached to it. This is nothing but the subscriber and the use case is really simple. We are just printing over here. Let's summarize this. So we are going to get the spring spring book and react to spring bought us each and every element passing down to the next layer which is the major player in the map layer. We are just concatenate in the flux to the each and every element and then it goes through the subscript method and then the subscript method to give this example simple. We are not doing any additional activities we are just printing that value. Now let's go ahead and take a look at the documentation for this flux. Go to the browser Let's type and project reactor flux and then it takes you to this. I want to go to the browser search result and then come on here. So project reactor flux and then click on this first link. This page as a complete information on board flux. If you remember this is a module diagram which we just discussed. And then if you go a little bit down. These are the different kinds of methods that are supported by the flux API. When you say matter these are the different operators. So we saw the map method in our example right. Likewise it has lots and lots of methods and it can change many different operators to follow pipeline too. So that's the way we normally code we'll be exploring all those examples in the future part of the course. But for now let's take a look at one of the example I'm gonna take this buffer in my size as an example if we go here we have in this example the top layer represents actual data. As I explained and then in the buffer for what we have is a max size of three. So it's going to buffer until the size is reached and then it's going to send the output as a combined output of three elements to the subscriber. And if you take a look at it we have 1 3 5. So here are the two elements we receive the on complete reboot. So the buffer is smart enough to know hey I am not going to receive any more data for this. So I'm going to combine those two as output and send it to the subscriber. So these model diagrams are handy and you can refer to each and every operator that we have here. And then the marble diagrams will give you a pictorial representation of how it's going to work. So this is all about flux. Now let's go ahead and explore the model. Let's go to the presentation model is the representation of zero to one element actually. So here if you take a look at it we have one model at the top and one model at the bottom. So that's what is model support after this one element we are going to receive on completely burned. So they actually represent some kind of error happened in the model so Monroe is a use case. Let's say you are requesting for only one data from one database or one B one data from the restaurant point. So in those kind of cases you can use model whenever you see more than one element then we will use the flux. Now let's go to the example. So here this example is similar to the one which we discussed for the flux. So here we have mono dot just so. Just. And then only one element you cannot provide multiple element as an input to this just method if you're using model if you do that you're going to get completion issues followed by that we are performing the map operation and then we are transforming the original value which spring to spring flux and then we have a subscribe method here. So you are type of subscriber and then we are printing that value in the console just for the simple use case we have here. So in the future we'll be discussing more complex examples. We have seen enough theory about Project reactor and its implementations. Let's go ahead and explore these in the code and the following tutorials. But as we came to the end of this tutorial. Thank you for watching.