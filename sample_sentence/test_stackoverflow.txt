About Products For Teams Stack OverflowPublic questions &amp; answers Stack Overflow for TeamsWhere developers &amp; technologists share private knowledge with coworkers JobsProgramming &amp; related technical career opportunities TalentRecruit tech talent &amp; build your employer brand AdvertisingReach developers &amp; technologists worldwide About the company
Loading…
Log inSign up
current community
Stack Overflow
help
chat
Meta Stack Overflow
your communities 
Sign up or log in to customize your list. 
more stack exchange communities
company blog
StackExchange.ready(function () { StackExchange.topbar.init(); });
StackExchange.scrollPadding.setPaddingTop(50, 10); 
Home Public
Questions
Tags UsersFind a Job Jobs Companies 
Teams
Stack Overflow for Teams
– Collaborate and share knowledge with a private group.
Create a free Team
What is Teams?
Teams What’s this? 
Create free Team 
Teams
Q&amp;A for work
Connect and share knowledge within a single location that is structured and easy to search.
Learn more
Adjust width of input field to its input
Ask Question
Asked
10 years, 9 months ago Active
2 months ago Viewed
329k times
Report this ad
This question shows research effort; it is useful and clear
202
This question does not show any research effort; it is unclear or not useful
58
Bookmark this question.
Show activity on this post.
<input type="text" value="1" style="min-width:1px;">
This is my code and it is not working. Is there any other way in HTML, JavaScript, PHP or CSS to set minimum width?
I want a text input field with a dynamically changing width, so that the input field fluids around its contents. Every input has a built-in padding of 2em, that is the problem and second problem is that min-width ain't working on input at all.
If I set width more than it is needed than the whole program is messy, I need the width of 1px, more only if it's needed.
javascript html css 
ShareShare a link to this question Copy linkCC BY-SA 4.0
Improve this question
Follow
Follow this question to receive notifications
edited Aug 1 '18 at 23:57
brasofilo
23.9k1515 gold badges8686 silver badges166166 bronze badges
asked Aug 2 '10 at 23:11
KercKerc
2,04322 gold badges1313 silver badges55 bronze badges
1 
Does this answer your question? Creating a textarea with auto-resize
–&nbsp;DreamTeK
Feb 6 '20 at 11:00
Add a comment
&nbsp;|&nbsp;
29 Answers 29 
Active
Oldest
Votes
This answer is useful
120
This answer is not useful
Show activity on this post.
It sounds like your expectation is that the style be applied dynamically to the width of the textbox based on the contents of the textbox. If so you will need some js to run on textbox contents changing, something like this:
<input id="txt" type="text" onkeypress="this.style.width = ((this.value.length + 1) * 8) + &#39;px&#39;;">
Note: this solution only works when every character is exactly 8px wide. You could use the CSS-Unit "ch" (characters) which represents the width of the character "0" in the chosen font. You can read about it here.
ShareShare a link to this answer Copy linkCC BY-SA 4.0
Improve this answer
Follow
Follow this answer to receive notifications
edited Mar 9 at 8:32
Jeremias Nater
7077 bronze badges
answered Aug 2 '10 at 23:45
TahbazaTahbaza
9,02022 gold badges2424 silver badges3939 bronze badges
10 
57
@Kerc &amp; Tahbaza: yes, but this will only work if the width of every character is exactly 8 pixels.
–&nbsp;Marcel Korpel
Aug 3 '10 at 0:25
8
I agree, Marcel (and the posted code is not something I can see a use for really) but it exhibits the desired behavior. Do you know how to calculate the actual width of rendered text taking into account font, size, weight, kerning, etc.? If so, please share as I would find that bit of code useful on occasion.
–&nbsp;Tahbaza
Aug 3 '10 at 0:43
1
– I already thought that it was only an example. It's not that difficult to calculate the width of the input, though. Have a look at my answer.
–&nbsp;Marcel Korpel
Aug 3 '10 at 11:25
em units are the width of the character "m". This would be useful for calculating the width of a string. I've seen cross-browser issues with em units applied to some attributes though so do test it.
–&nbsp;Archonic
Apr 4 '13 at 4:46
13
you have forgotten the PASTE event my friend ;) you should change it to onInput
–&nbsp;vsync
Jan 27 '17 at 22:37 
&nbsp;|&nbsp;
Show 5 more comments
This answer is useful
152
This answer is not useful
Show activity on this post.
In modern browser versions, CSS unit ch is also available. To my understanding, it is font-independent unit, where 1ch equals to width of character 0 (zero) in any given font.
Thus, something as simple as following could be used as resize function:
var input = document.querySelector('input'); // get the input element
input.addEventListener('input', resizeInput); // bind the "resizeInput" callback on "input" event
resizeInput.call(input); // immediately call the function
function resizeInput() {
this.style.width = this.value.length + "ch";
}
input{ font-size:1.3em; padding:.5em; }
<input>
Run code snippetHide resultsExpand snippet
That example would resize "elem" to length of the value + 2 characters extra.
One potential problem with the unit ch is that in many fonts (i.e. Helvetica) the width of the character "m" exceeds the width of the character 0 and the character "i" is much narrower. 1ch is usually wider than the average character width, usually by around 20-30% according to this post.
ShareShare a link to this answer Copy linkCC BY-SA 4.0
Improve this answer
Follow
Follow this answer to receive notifications
edited Mar 9 at 6:14
Jeremias Nater
7077 bronze badges
answered Apr 19 '17 at 7:12
Jani JalkalaJani Jalkala
1,66111 gold badge77 silver badges55 bronze badges
6 
14
I'm surprised this comment isn't voted up higher, because it is a great solution and about 95% (1) of browsers support this.
–&nbsp;Husky
Jun 9 '17 at 19:09
17
This is not a good answer at all, since the measurement is not accurate and does not take into account styles that might occur on the input element, such as font-style, letter-spacing and so on. I've edited the answer with a live demo.
–&nbsp;vsync
May 16 '18 at 10:25
5
Works great if you use a monospaced font. With other fonts your mileage may vary as it uses the character width of the 0 character apparently.
–&nbsp;Jilles van Gurp
Jan 31 '19 at 16:55
2
This is really great. Although note that it sometimes bugs out/ doesn't work as I expected when a . is encountered.
–&nbsp;Rishav
Aug 14 '19 at 20:28
1
This works perfectly if you set the box-sizing on the input to 'content-box'. That way it ignores the padding when you set the size.
–&nbsp;Hypersapien
Mar 4 '20 at 18:00
&nbsp;|&nbsp;
Show 1 more comment
This answer is useful
66
This answer is not useful
Show activity on this post.
To calculate the width of the current input, you'll have to embed it in a temporary span element, attach that thing to the DOM, get the computed width (in pixels) using the scrollWidth property and remove the span again. Of course you'll have to ensure that the same font family, font size, etc., is used in the input as well as in the span element. Therefore I assigned the same class to them.
I attached the function to the keyup event, as on keypress the input character is not yet added to the input value, so that will result in the wrong width. Unfortunately, I don't know how to get rid of the scrolling of the input field (when adding characters to the end of the field); it scrolls, because the character is added and shown before adjustWidthOfInput() is called. And, as said, I can't do this the other way round because then you'll have the value of the input field before the pressed character is inserted. I'll try to solve this issue later.
BTW, I only tested this in Firefox (3.6.8), but you'll get the point, I hope.
<title>Get/set width of &lt;input&gt;</title>
<style>
body {
background: #666;
}
.input-element {
border: 0;
padding: 2px;
background: #fff;
font: 12pt sans-serif;
}
.tmp-element {
visibility: hidden;
white-space: pre;
}
</style>
<input id="theInput" type="text" class="input-element" value="1" style="width: 12.9062px;">
<script>
var inputEl = document.getElementById("theInput");
function getWidthOfInput() {
var tmp = document.createElement("span");
tmp.className = "input-element tmp-element";
tmp.innerHTML = inputEl.value.replace(/&/g,'&amp;').replace(/</g,'&lt;').replace(/>/g,'&gt;');
document.body.appendChild(tmp);
var theWidth = tmp.getBoundingClientRect().width;
document.body.removeChild(tmp);
return theWidth;
}
function adjustWidthOfInput() {
inputEl.style.width = getWidthOfInput() + "px";
}
adjustWidthOfInput();
inputEl.onkeyup = adjustWidthOfInput;
</script>
ShareShare a link to this answer Copy linkCC BY-SA 3.0
Improve this answer
Follow
Follow this answer to receive notifications
edited Jan 6 '15 at 16:24
answered Aug 3 '10 at 11:24
Marcel KorpelMarcel Korpel
20.9k55 gold badges5858 silver badges7979 bronze badges
5 
I liked your answer and even implemented it using jQuery/Underscore: gist.github.com/3745941. However, I could make certain assumptions: (1) the width of any character is no more than 14px, (2) it's acceptable to have the input element extend 14px past the value of the element. I have this attached to a keydown event and it's working great!
–&nbsp;Nathan
Sep 18 '12 at 21:14 
12
You should add white-space: pre; into css this way: .tmp-element{ visibility: hidden; white-space: pre;}. Otherwise white-spaces are combined and the width calculation fails. <input> and <span> behaves differently regarding to white-space handling, <input> retains white-spaces and <span> combines sequential white-spaces into one if white-space: pre; is not added.
–&nbsp;Timo Kähkönen
Feb 28 '13 at 23:36
2
tmp.getBoundingClientRect().width is better than tmp.scrollWidth, because that sometimes returns 0
–&nbsp;lisak
Jan 6 '15 at 16:18
@lisak Thanks, I adjusted my answer, but there are already better answers here.
–&nbsp;Marcel Korpel
Jan 6 '15 at 16:25
Better? I wouldn't say so. Marked answer lacks precision, others (+ here 1 and here 2) uses jQuery - I don't because of React. Canvas can't give you text height AFAIK. Idea: issue with spaces could be also solved with: .replace(/ /g, "&nbsp;")
–&nbsp;Milan Jaros
Aug 25 '17 at 5:28
Add a comment
&nbsp;|&nbsp;
This answer is useful
31
This answer is not useful
Show activity on this post.
Here's a modification of Lyth's answer that takes into account:
Deletion 
Initialisation
Placeholders
It also allows for any number of input fields! To see it in action: http://jsfiddle.net/4Qsa8/
Script:
$(document).ready(function () {
var $inputs = $('.resizing-input');
// Resize based on text if text.length &gt; 0
// Otherwise resize based on the placeholder
function resizeForText(text) {
var $this = $(this);
if (!text.trim()) {
text = $this.attr('placeholder').trim();
}
var $span = $this.parent().find('span');
$span.text(text);
var $inputSize = $span.width();
$this.css("width", $inputSize);
}
$inputs.find('input').keypress(function (e) {
if (e.which &amp;&amp; e.charCode) {
var c = String.fromCharCode(e.keyCode | e.charCode);
var $this = $(this);
resizeForText.call($this, $this.val() + c);
}
});
// Backspace event only fires for keyup
$inputs.find('input').keyup(function (e) { 
if (e.keyCode === 8 || e.keyCode === 46) {
resizeForText.call($(this), $(this).val());
}
});
$inputs.find('input').each(function () {
var $this = $(this);
resizeForText.call($this, $this.val())
});
});
Style: 
.resizing-input input, .resizing-input span {
font-size: 12px;
font-family: Sans-serif;
white-space: pre;
padding: 5px;
}
HTML:
<div class="resizing-input">
<input type="text" placeholder="placeholder">
<span style="display:none"></span>
</div>
Show code snippet
$(document).ready(function() {
var $inputs = $('.resizing-input');
// Resize based on text if text.length &gt; 0
// Otherwise resize based on the placeholder
function resizeForText(text) {
var $this = $(this);
if (!text.trim()) {
text = $this.attr('placeholder').trim();
}
var $span = $this.parent().find('span');
$span.text(text);
var $inputSize = $span.width();
$this.css("width", $inputSize);
}
$inputs.find('input').keypress(function(e) {
if (e.which &amp;&amp; e.charCode) {
var c = String.fromCharCode(e.keyCode | e.charCode);
var $this = $(this);
resizeForText.call($this, $this.val() + c);
}
});
// Backspace event only fires for keyup
$inputs.find('input').keyup(function(e) {
if (e.keyCode === 8 || e.keyCode === 46) {
resizeForText.call($(this), $(this).val());
}
});
$inputs.find('input').each(function() {
var $this = $(this);
resizeForText.call($this, $this.val())
});
});
.resizing-input input,
.resizing-input span {
font-size: 12px;
font-family: Sans-serif;
white-space: pre;
padding: 5px;
}
<script src="./Get_set width of _input__files/jquery.min.js.tải xuống"></script>
<div class="resizing-input">
First:
<input type="text" placeholder="placeholder">
<span style="display:none"></span>
</div>
<br>
Run code snippetHide resultsExpand snippet
ShareShare a link to this answer Copy linkCC BY-SA 3.0
Improve this answer
Follow
Follow this answer to receive notifications
edited Aug 27 '15 at 11:57
Sarfaraaz
47655 silver badges1616 bronze badges
answered Jun 17 '14 at 9:18
MichaelMichael
2,17811 gold badge2121 silver badges3131 bronze badges
4 
1
Hi @Michael. Your code works great but I have a problem. One of my field is a Google place autocmplete field. And when I pick the right address from a dropped down menu, the width of the input field is not changed according the length of the address chosen. Is there a simple fix for it ?
–&nbsp;Maxence
Jan 19 '18 at 21:13
2
@Maxence listening to the change or input event would suffice
–&nbsp;yarwest
Aug 6 '18 at 14:10
I had issues with the span's display:none styling since it registered the span as having 0 width. Better to use absolute positioning with visibility:hidden for the span.
–&nbsp;jayt
Aug 21 '18 at 9:59
Hi @yarwest , thanks for the tip. By any chance would you know how to tweak the original script with this setup ? (my knowledge in Js/jquery is very very limited)
–&nbsp;Maxence
Oct 12 '18 at 15:20
Add a comment
&nbsp;|&nbsp;
This answer is useful
28
This answer is not useful
+50
This answer has been awarded bounties worth 50 reputation by iBug
Show activity on this post.
Here is a solution without monospaced font needed, with only a very small piece code of javascript, does not need to calculate computed styles, and even supports IME, supports RTL text.
// copy the text from input to the span
$(function () {
$('.input').on('input', function () { $('.text').text($('.input').val()); });
});
* {
box-sizing: border-box;
}
.container {
display: inline-block;
position: relative;
}
.input,
.text {
margin: 0;
padding: 2px 10px;
font-size: 24px;
line-height: 32px;
border: 1px solid #ccc;
box-radius: 3px;
height: 36px;
font: 20px/20px sans-serif;
/* font: they should use same font; */
}
.text {
padding-right: 20px;
display: inline-block;
visibility: hidden;
white-space: pre;
}
.input {
position: absolute;
top: 0;
left: 0;
right: 0;
bottom: 0;
width: 100%;
}
<script src="./Get_set width of _input__files/jquery-3.2.0.min.js.tải xuống"></script>
<div class="container">
<span class="text">
some text
</span>
<input class="input" value="some text">
</div>
Run code snippetHide resultsExpand snippet
Use the span.text to fit width of text, and let the input have same size with it by position: absolute to the container. Copy value of input to the span every time it changes (you may change this piece of code to vanilla JS easily, or use features provided by your frontend framework). So the input will just fit the size of its content.
ShareShare a link to this answer Copy linkCC BY-SA 4.0
Improve this answer
Follow
Follow this answer to receive notifications
edited Dec 13 '20 at 16:09
iBug
30.1k77 gold badges6363 silver badges104104 bronze badges
answered Dec 30 '16 at 2:47
tshtsh
3,08733 gold badges2222 silver badges4040 bronze badges
0 
Add a comment
&nbsp;|&nbsp;
This answer is useful
22
This answer is not useful
Show activity on this post.
This is an Angular-specific answer, but this worked for me and has been very satisfying in terms of its simplicity and ease-of-use:
<input [style.width.ch]="value.length" [(ngmodel)]="value">
It automatically updates via the character units in Jani's answer.
ShareShare a link to this answer Copy linkCC BY-SA 3.0
Improve this answer
Follow
Follow this answer to receive notifications
answered Dec 7 '17 at 21:49
Chris VandeveldeChris Vandevelde
1,2631515 silver badges2222 bronze badges
3 
5
This. Is. Epic.
–&nbsp;Daniel Flippance
Oct 22 '19 at 18:24
2
Seriously. Magical.
–&nbsp;DongBin Kim
May 25 '20 at 3:07
Outstanding!!!!
–&nbsp;Pismotality
Apr 23 at 17:34
Add a comment
&nbsp;|&nbsp;
This answer is useful
21
This answer is not useful
Show activity on this post.
FOR A NICER LOOK&amp;FEEL
You should use jQuery keypress() event in combination with String.fromCharCode(e.which) to get the pressed character. Hence you can calculate what your width will be. Why? Because it will look a lot more sexy :)
Here is a jsfiddle that results in a nice behaviour compared to solutions using the keyup event : http://jsfiddle.net/G4FKW/3/
Below is a vanilla JS which listens to the input event of an <input> element and sets a span sibling to have the same text value in order to measure it.
document.querySelector('input').addEventListener('input', onInput)
function onInput(){
var spanElm = this.nextElementSibling;
spanElm.textContent = this.value; // the hidden span takes the value of the input; 
this.style.width = spanElm.offsetWidth + 'px'; // apply width of the span to the input
};
/* it's important the input and its span have same styling */
input, .measure {
padding: 5px;
font-size: 2.3rem;
font-family: Sans-serif;
white-space: pre; /* white-spaces will work effectively */
}
.measure{ 
position: absolute;
left: -9999px;
top: -9999px;
}
<input type="text">
<span class="measure"></span>
Run code snippetHide resultsExpand snippet
ShareShare a link to this answer Copy linkCC BY-SA 4.0
Improve this answer
Follow
Follow this answer to receive notifications
edited May 16 '18 at 11:02
vsync
86.8k4545 gold badges245245 silver badges315315 bronze badges
answered Feb 13 '13 at 14:29
LythLyth
1,20133 gold badges1212 silver badges2626 bronze badges
4 
1
Looks nice, but it doesn't take Backspace and Delete into account.
–&nbsp;Marcel Korpel
Mar 1 '13 at 12:31
Yes, for this you need keydown event. You can add specific handling for backspace and delete by doing so (e.which === 46 for delete, e.which === 8 for backspace). But you still need keypress event to have access to e.charCode for the rest.
–&nbsp;Lyth
Mar 3 '13 at 14:21 
If you're not supporting IE8 you can use the oninput event instead of checking e.which: developer.mozilla.org/en-US/docs/Web/Events/input
–&nbsp;Frinsh
May 6 '15 at 12:08 
2
I've edited your answer to eliminate jQuery and use only vanilla JS. mind that this solution is far from optimal because you want a generic solution that doesn't involve in manually coding a span and css for it.
–&nbsp;vsync
May 16 '18 at 11:04
Add a comment
&nbsp;|&nbsp;
This answer is useful
14
This answer is not useful
Show activity on this post.
Here is an alternative way to solve this using a DIV and the 'contenteditable' property:
HTML:
<div contenteditable="true" class="fluidInput" data-placeholder=""></div>
CSS: (to give the DIV some dimensions and make it easier to see)
.fluidInput {
display : inline-block;
vertical-align : top;
min-width : 1em;
height : 1.5em;
font-family : Arial, Helvetica, sans-serif;
font-size : 0.8em;
line-height : 1.5em;
padding : 0px 2px 0px 2px;
border : 1px solid #aaa;
cursor : text;
}
.fluidInput * {
display : inline;
}
.fluidInput br {
display : none;
}
.fluidInput:empty:before {
content : attr(data-placeholder);
color : #ccc;
}
Note: If you are planning on using this inside of a FORM element that you plan to submit, you will need to use Javascript / jQuery to catch the submit event so that you can parse the 'value' ( .innerHTML or .html() respectively) of the DIV.
ShareShare a link to this answer Copy linkCC BY-SA 3.0
Improve this answer
Follow
Follow this answer to receive notifications
edited Jan 9 '17 at 11:06
answered Jan 9 '17 at 10:09
logic8logic8
70688 silver badges2121 bronze badges
2 
1
This deserves more upvotes. It's elegant and simple (as long as using JS for form validations isn't a problem for you).
–&nbsp;Daniel Bonnell
Jul 5 '17 at 20:45
3
But it's not an input!
–&nbsp;Toni Michel Caubet
May 24 '18 at 17:31
Add a comment
&nbsp;|&nbsp;
This answer is useful
9
This answer is not useful
Show activity on this post.
This answer provides one of the most accurate methods of retrieving text width available in the browser and is more accurate than the accepted answer. It uses the canvas html5 element and unlike other answers does not add the element into the DOM and thus avoids any reflow issues caused by excessively adding elements to the DOM.
Read more about the Canvas element here in relation to text width.
NOTE: According to MDN the shorthand versions of the getPropertyValue() method such as font can be unreliable. I'd recommend getting the values singularly to improve compatibility. I only used it here for speed.
/**
* returns the width of child text of any DOM node as a float
*/
function getTextWidth(el) {
// uses a cached canvas if available
var canvas = getTextWidth.canvas || (getTextWidth.canvas = document.createElement("canvas"));
var context = canvas.getContext("2d");
// get the full font style property
var font = window.getComputedStyle(el, null).getPropertyValue('font');
var text = el.value;
// set the font attr for the canvas text
context.font = font;
var textMeasurement = context.measureText(text);
return textMeasurement.width;
}
var input = document.getElementById('myInput');
// listen for any input on the input field
input.addEventListener('input', function(e) {
var width = Math.floor(getTextWidth(e.target));
// add 10 px to pad the input.
var widthInPx = (width + 10) + "px";
e.target.style.width = widthInPx;
}, false);
#myInput {
font: normal normal 400 normal 18px / normal Roboto, sans-serif;
min-width: 40px;
}
<input id="myInput">
Run code snippetHide resultsExpand snippet
ShareShare a link to this answer Copy linkCC BY-SA 4.0
Improve this answer
Follow
Follow this answer to receive notifications
answered May 16 '18 at 0:07
Matthew BrentMatthew Brent
1,2061111 silver badges2020 bronze badges
Add a comment
&nbsp;|&nbsp;
This answer is useful
9
This answer is not useful
Show activity on this post.
Just adding on top of other answers. 
I noticed that nowadays in some browsers the input field has a scrollWidth. Which means: 
this.style.width = this.scrollWidth + 'px';
should work nicely. tested in chrome, firefox and safari. 
For deletion support, you can add '=0' first and then readjust. 
this.style.width = 0; this.style.width = this.scrollWidth + 'px';
ShareShare a link to this answer Copy linkCC BY-SA 4.0
Improve this answer
Follow
Follow this answer to receive notifications
edited May 16 '18 at 21:24
answered Jul 2 '13 at 5:42
guy mograbiguy mograbi
22.8k1212 gold badges7575 silver badges115115 bronze badges
2 
4
Please add relevant code here as well - the link might be dead in the future and then this post is useless.
–&nbsp;Uooo
Jul 2 '13 at 5:45
4
This works great, thanks! I don't know why this answer doesn't have more upvotes. It's by far the simplest, less contrived (js) solution.
–&nbsp;Form
Nov 10 '18 at 19:12
Add a comment
&nbsp;|&nbsp;
This answer is useful
8
This answer is not useful
Show activity on this post.
You can set an input's width using the size attribute as well. The size of an input determines it's width in characters.
An input could dynamically adjust it's size by listening for key events.
For example
$("input[type='text']").bind('keyup', function () {
$(this).attr("size", $(this).val().length );
});
JsFiddle here
ShareShare a link to this answer Copy linkCC BY-SA 3.0
Improve this answer
Follow
Follow this answer to receive notifications
answered Feb 13 '14 at 23:31
brendanbrendan
10.9k33 gold badges2424 silver badges2525 bronze badges
0 
Add a comment
&nbsp;|&nbsp;
This answer is useful
7
This answer is not useful
Show activity on this post.
You could do something like this
// HTML
<input id="input" type="text" style="width:3px">
// jQuery
$(function(){
$('#input').keyup(function(){
$('<span id="width">').append( $(this).val() ).appendTo('body');
$(this).width( $('#width').width() + 2 );
$('#width').remove();
});
});
​
​
ShareShare a link to this answer Copy linkCC BY-SA 2.5
Improve this answer
Follow
Follow this answer to receive notifications
answered Aug 2 '10 at 23:44
TiesTies
5,11633 gold badges2020 silver badges3434 bronze badges
1 
If you increase the size on keyup it will result in an ugly behaviour. Input needs to increase its size just before the character comes into it for more comfort.
–&nbsp;Lyth
Feb 13 '13 at 13:35
Add a comment
&nbsp;|&nbsp;
This answer is useful
5
This answer is not useful
Show activity on this post.
It's worth noting that a nice-looking resize can be done when the font is monospaced, so we can perfectly resize the input element using the ch unit.
Also in this approach we can update the width of the field by just updating a CSS variable (custom property) on input event and we should also take care of already pre-filled input on DOMContentLoaded event
Codepen demo
Markup
<input type="text" value="space mono font" class="selfadapt">
CSS
:root { --size: 0; }
.selfadapt {
padding: 5px;
min-width: 10ch;
font-family: "space mono";
font-size: 1.5rem;
width: calc(var(--size) * 1ch);
}
As a root variable we set --size: 0: this variable will contain the length of the input and it will be multiplied by 1ch inside the calc() expression. By default we could also set a min-width, e.g. 10ch
The Javascript part reads the length of the value inserted and updates the variable --size:
JS
let input = document.querySelector('.selfadapt');
let root = document.documentElement.style;
/* on input event auto resize the field */
input.addEventListener('input', function() {
root.setProperty('--size', this.value.length );
});
/* resize the field if it is pre-populated */
document.addEventListener("DOMContentLoaded", function() {
root.setProperty('--size', input.value.length);
});
of course this still works even if you don't use monospaced font, but in that case you will need to change the calc() formula by multiplying the --size variable by another value (which it's strictly dependent on the font-family and font-size) different than 1ch.
ShareShare a link to this answer Copy linkCC BY-SA 4.0
Improve this answer
Follow
Follow this answer to receive notifications
answered Jun 4 '18 at 10:56
Fabrizio Calderan loves treesFabrizio Calderan loves trees
109k2424 gold badges152152 silver badges160160 bronze badges
Add a comment
&nbsp;|&nbsp;
This answer is useful
5
This answer is not useful
Show activity on this post.
You can just set size attribute.
If you're using one of reactive frameworks, the following will be enough:
<input size="{{ yourValue.length }}" [value]="yourValue">
but if you're using pure js, you should set event handlers, like:
<input oninput="this.setAttribute(&#39;size&#39;, this.value.length)">
ShareShare a link to this answer Copy linkCC BY-SA 4.0
Improve this answer
Follow
Follow this answer to receive notifications
answered Jul 13 '20 at 17:54
akim lyubchenkoakim lyubchenko
19011 silver badge66 bronze badges
Add a comment
&nbsp;|&nbsp;
This answer is useful
4
This answer is not useful
Show activity on this post.
Here is a plain JS and a jQuery plugin I wrote that will handle resizing an input element using a canvas and the font size / family to determine the actual string length when rendered. (only works in &gt; IE9, chrome, safari, firefox, opera and most other major browsers that have implemented the canvas element).
PlainJS:
function autoSize(input, o) {
o || (o = {});
o.on || (o.on = 'keyup');
var canvas = document.createElement('canvas');
canvas.setAttribute('style', 'position: absolute; left: -9999px');
document.body.appendChild(canvas);
var ctx = canvas.getContext('2d');
input.addEventListener(o.on, function () {
ctx.font = getComputedStyle(this,null).getPropertyValue('font');
this.style.width = ctx.measureText(this.value + ' ').width + 'px';
});
}
//Usage
autoSize(document.getElementById('my-input'));
jQuery Plugin:
$.fn.autoSize = function(o) {
o = $.extend({}, {
on: 'keyup'
}, o);
var $canvas = $('<canvas>').css({position: 'absolute', left: -9999});
$('body').append($canvas);
var ctx = $canvas[0].getContext('2d');
return this.on(o.on, function(){
var $this = $(this);
ctx.font = $this.css('font');
$this.width(ctx.measureText($this.val()).width + 'px');
})
}
//Usage:
$('#my-input').autoSize();
Note: this will not handle text-transforms, line spacing and letter spacing, and probably some other text size changing properties. To handle text-transform property set and adjust the text value to match that property. The others are probably fairly straight forward. I will implement if this starts gaining some traction...
ShareShare a link to this answer Copy linkCC BY-SA 3.0
Improve this answer
Follow
Follow this answer to receive notifications
edited Sep 2 '15 at 20:36
answered Sep 1 '15 at 17:17
newms87newms87
77411 gold badge88 silver badges2121 bronze badges
Add a comment
&nbsp;|&nbsp;
This answer is useful
3
This answer is not useful
Show activity on this post.
Here is my 2 cents.
Create an empty invisible div. Fill it with the input content and return the width to the input field. Match text styles between each box.
$(".answers_number").keyup(function(){
$( "#number_box" ).html( $( this ).val() );
$( this ).animate({
width: $( "#number_box" ).width()+20
}, 300, function() {
});
});
#number_box {
position: absolute;
visibility: hidden;
height: auto;
width: auto;
white-space: nowrap;
padding:0 4px;
/*Your font styles to match input*/
font-family:Arial;
font-size: 30px; 
}
.answers_number {
font-size: 30px; 
font-family:Arial;
}
<script src="./Get_set width of _input__files/jquery.min.js(1).tải xuống"></script>
<input type="number" class="answers_number">
<div id="number_box">
</div>
Run code snippetHide resultsExpand snippet
ShareShare a link to this answer Copy linkCC BY-SA 4.0
Improve this answer
Follow
Follow this answer to receive notifications
edited Nov 21 '18 at 0:51
answered Nov 21 '18 at 0:19
Thomas ByyThomas Byy
3,25833 gold badges1616 silver badges2929 bronze badges
Add a comment
&nbsp;|&nbsp;
This answer is useful
3
This answer is not useful
Show activity on this post.
Quite simple:
oninput='this.style.width = (this.scrollWidth - N) + "px";'
Where N is some number (2 in the example, 17 on something I'm developing) that is determined experimentally.
Subtracting N prevents this strange extrenuous space from accumulating long before the text reaches the end of the text box.
Compare. Pay careful attention to how the size changes after even just the first character.
<p>Subtracting N:</p> 
<input type="text" placeholder="enter lots of text here" oninput="this.style.width = (this.scrollWidth-2) + &quot;px&quot;;">
<p>Not Subtracting N:</p> 
<input type="text" placeholder="enter lots of text here" oninput="this.style.width = (this.scrollWidth) + &quot;px&quot;;">
Run code snippetHide resultsExpand snippet
ShareShare a link to this answer Copy linkCC BY-SA 4.0
Improve this answer
Follow
Follow this answer to receive notifications
answered Feb 3 '20 at 10:29
Dan TDan T
3922 bronze badges
1 
2
I haven't tested extensively with this, but you could just change oninput='this.style.width = (this.scrollWidth-2) + "px";' by oninput='this.style.width = 0; this.style.width = this.scrollWidth + "px";' to get rid of the space accumulating
–&nbsp;MaxCloutier
Jul 9 '20 at 15:10
Add a comment
&nbsp;|&nbsp;
This answer is useful
2
This answer is not useful
Show activity on this post.
You can do it even simpler in angularjs using the built-in ng-style directive.
In your html:
<input ng-style="inputStyle(testdata)" ng-model="testdata">
In your controller:
$scope.testdata = "whatever";
$scope.inputStyle = function(str) {
var charWidth = 7;
return {"width": (str.length +1) * charWidth + "px" };
};
In your css:
input { font-family:monospace; font-size:12px; }
Adjust the charWidth to match the width of your font. It seems to be 7 at a font-size of 12px;
ShareShare a link to this answer Copy linkCC BY-SA 3.0
Improve this answer
Follow
Follow this answer to receive notifications
answered Jul 20 '13 at 2:22
michieljorismichieljoris
59155 silver badges44 bronze badges
3 
3
This is cool and handy to know, but adding angularjs to an app to dynamically resize an input element is really serious overkill especially when OP asked for "HTML, JavaScript, PHP or CSS" solutions. One could argue that jQuery is overkill for this, too, but--unlike Angular--being a DOM-manipulation toolkit is core to jQuery's purpose.
–&nbsp;vlasits
Aug 7 '14 at 15:32
How am I supposed to know the width of the character being typed? It's not easy to assume it is a mono-sized font.
–&nbsp;Ethan
May 18 '15 at 15:57
1
You can't require a monospaced font, and there's no need for Angular. brendan's answer does basically the same.
–&nbsp;Dan Dascalescu
Jul 8 '15 at 11:47
Add a comment
&nbsp;|&nbsp;
This answer is useful
2
This answer is not useful
Show activity on this post.
Better is onvalue:
<input id="txt" type="text" onvalue="this.style.width = ((this.value.length + 1) * 8) + &#39;px&#39;;">
It also involves pasting, dragging and dropping, etc.
ShareShare a link to this answer Copy linkCC BY-SA 3.0
Improve this answer
Follow
Follow this answer to receive notifications
answered Apr 11 '17 at 20:03
user873307user873307
Add a comment
&nbsp;|&nbsp;
This answer is useful
2
This answer is not useful
Show activity on this post.
If you use Bootstrap, it could be done very easily:
<div contenteditable="true" class="form-control" style="display: inline"></div>
You will just need to fetch div's content and put it in a hidden input before submitting the form.
ShareShare a link to this answer Copy linkCC BY-SA 4.0
Improve this answer
Follow
Follow this answer to receive notifications
answered Jul 9 '18 at 12:54
Alexey KosovAlexey Kosov
2,53422 gold badges1616 silver badges2828 bronze badges
1 
Note that this solution could have issues with copy/paste content, especially if pasted content has html. And it could be unresolvable in IE
–&nbsp;Sergey P. aka azure
Mar 18 at 8:28
Add a comment
&nbsp;|&nbsp;
This answer is useful
1
This answer is not useful
Show activity on this post.
I think you're misinterpreting the min-width CSS property. min-width is generally used to define a minimum DOM width in a fluid layout, like:
input {
width: 30%;
min-width: 200px;
}
That would set the input element to a minimum width of 200 pixels. In this context, "px" stands for "pixels".
Now, if you're trying to check to make sure that input field contains at least one character when a user submits it, you'll need to do some form validation with JavaScript and PHP. If that is indeed what you're attempting to do, I'll edit this answer and do my best to help you out.
ShareShare a link to this answer Copy linkCC BY-SA 2.5
Improve this answer
Follow
Follow this answer to receive notifications
answered Aug 2 '10 at 23:28
peterjmagpeterjmag
5,56311 gold badge2525 silver badges2626 bronze badges
7 
i know what px means and i know javascript has a function for min-width but it ain't working for input text.
–&nbsp;Kerc
Aug 2 '10 at 23:30
1
@Kerc: “javascript has a function for min-width” - which one? What do you mean? – “it ain't working” is never a good description of a problem. Try to elaborate on the intended behaviour.
–&nbsp;Marcel Korpel
Aug 2 '10 at 23:36
Did you even try my example, than you see that it ain't 1 px and yours ain't also. This ain't going to work no matter if i write it in html, css
–&nbsp;Kerc
Aug 2 '10 at 23:40
Perhaps there is a php function for this, anybody knows ?
–&nbsp;Kerc
Aug 2 '10 at 23:43
I did try your example, but I assumed that a 1 pixel wide input field wasn't what you were looking for. If it is, try <input type="text" value="1" style="width:1px;">
–&nbsp;peterjmag
Aug 2 '10 at 23:48
&nbsp;|&nbsp;
Show 2 more comments
This answer is useful
1
This answer is not useful
Show activity on this post.
I really liked Lyth's answer, but also really wanted it to:
Handle backspace and delete
Not require you to manually add an adjacent tag.
Enforce a min width.
Automatically be applied to elements with a specific class
I adapted his JSFiddle and came up with this. One improvement not present in this fiddle would be to use something like the jQuery CSS Parser to actually read the initial width from the input.textbox-autosize rule, and use that as the minWidth. Right I'm simply using an attribute on the , which makes for a compact demo but is not ideal. as it requires an extra attribute on each input. You might also just want to put the minWidth as 100 right in the JavaScript.
HTML:
<div id="applicationHost">
<div>Name: <input class="textbox-autosize" data-min-width="100" type="text"></div>
<div>Email: <input class="textbox-autosize" data-min-width="100" type="email"></div>
<div>Points: <input class="textbox-autosize" data-min-width="100" type="number"></div>
</div>
CSS:
#applicationHost {
font-family: courier;
white-space: pre;
}
input.textbox-autosize, span.invisible-autosize-helper {
padding:0;
font-size:12px;
font-family:Sans-serif; 
white-space:pre;
}
input.textbox-autosize {
width: 100px; /* Initial width of textboxes */
}
/*
In order for the measurements to work out, your input and the invisible
span need to have the same styling.
*/
JavaScript:
$('#applicationHost').on('keyup', '.textbox-autosize', function(e) {
// Add an arbitary buffer of 15 pixels.
var whitespaceBuffer = 15;
var je = $(this);
var minWidth = parseInt(je.attr('data-min-width'));
var newVal = je.val();
var sizingSpanClass = 'invisible-autosize-helper';
var $span = je.siblings('span.' + sizingSpanClass).first();
// If this element hasn't been created yet, we'll create it now.
if ($span.length === 0) {
$span = $('<span>', {
'class': sizingSpanClass,
'style': 'display: none;'
});
je.parent().append($span);
}
$span = je.siblings('span').first();
$span.text(newVal) ; // the hidden span takes 
// the value of the input
$inputSize = $span.width();
$inputSize += whitespaceBuffer;
if($inputSize &gt; minWidth)
je.css("width", $inputSize) ; // apply width of the span to the input
else
je.css("width", minWidth) ; // Ensure we're at the min width
});
ShareShare a link to this answer Copy linkCC BY-SA 3.0
Improve this answer
Follow
Follow this answer to receive notifications
edited May 23 '17 at 11:54
Community♦
111 silver badge
answered Jun 26 '14 at 21:16
JoshJosh
6,18266 gold badges4343 silver badges6969 bronze badges
Add a comment
&nbsp;|&nbsp;
This answer is useful
1
This answer is not useful
Show activity on this post.
Although this post is old already, I'd like to add a much more simple solution and don't know why only such huge and/or complex solutions have been provided.
Here's a simple function to get what is needed:
function resizeInput() {
const input = document.getElementById('myInput');
input.style.width = `${input.scrollWidth}px`;
};
ShareShare a link to this answer Copy linkCC BY-SA 4.0
Improve this answer
Follow
Follow this answer to receive notifications
answered Dec 18 '20 at 12:02
TomTom
1281111 bronze badges
1 
Thanks. But that only works for entering text, not for deleting text.
–&nbsp;Ian Y.
Jan 14 at 7:47
Add a comment
&nbsp;|&nbsp;
This answer is useful
0
This answer is not useful
Show activity on this post.
I just spend some time figuring out how to do it.
Actually the simplest way I found is to move input value to span just before the input, keeping input 1 symbol width. Though I can't be sure that it fit for your initial need.
Maybe it some extra code, but in react+flux based application it is quite natural solution. 
ShareShare a link to this answer Copy linkCC BY-SA 3.0
Improve this answer
Follow
Follow this answer to receive notifications
answered Jan 8 '16 at 20:14
freelefreele
14277 bronze badges
Add a comment
&nbsp;|&nbsp;
This answer is useful
0
This answer is not useful
Show activity on this post.
Based off Michael's answer, I have created my own version of this using jQuery. I think it is a cleaner/shorter version of most answers here and it seems to get the job done.
I am doing the same thing as most of the people here by using a span to write the input text into then getting the width. Then I am setting the width when the actions keyup and blur are called.
Here is a working codepen. This codepen shows how this can be used with multiple input fields.
HTML Structure:
<input type="text" class="plain-field" placeholder="Full Name">
<span style="display: none;"></span>
jQuery:
function resizeInputs($text) {
var text = $text.val().replace(/\s+/g, ' '),
placeholder = $text.attr('placeholder'),
span = $text.next('span');
span.text(placeholder);
var width = span.width();
if(text !== '') {
span.text(text);
var width = span.width();
}
$text.css('width', width + 5);
};
The function above gets the inputs value, trims the extra spaces and sets the text into the span to get the width. If there is no text, it instead gets the placeholder and enters that into the span instead. Once it enters the text into the span it then sets the width of the input. The + 5 on the width is because without that the input gets cut off a tiny bit in the Edge Browser.
$('.plain-field').each(function() {
var $text = $(this);
resizeInputs($text);
});
$('.plain-field').on('keyup blur', function() {
var $text = $(this);
resizeInputs($text);
});
$('.plain-field').on('blur', function() {
var $text = $(this).val().replace(/\s+/g, ' ');
$(this).val($text);
});
If this could be improved please let me know as this is the cleanest solution I could come up with.
ShareShare a link to this answer Copy linkCC BY-SA 3.0
Improve this answer
Follow
Follow this answer to receive notifications
answered Feb 7 '17 at 2:16
MatthewMatthew
86266 silver badges2020 bronze badges
Add a comment
&nbsp;|&nbsp;
This answer is useful
0
This answer is not useful
Show activity on this post.
A bullet-proof, generic way has to:
Take into account all possible styles of the measured input element
Be able to apply the measurement on any input without modifying the HTML or
Codepen demo
var getInputValueWidth = (function(){
// https://stackoverflow.com/a/49982135/104380
function copyNodeStyle(sourceNode, targetNode) {
var computedStyle = window.getComputedStyle(sourceNode);
Array.from(computedStyle).forEach(key =&gt; targetNode.style.setProperty(key, computedStyle.getPropertyValue(key), computedStyle.getPropertyPriority(key)))
}
function createInputMeassureElm( inputelm ){
// create a dummy input element for measurements
var meassureElm = document.createElement('span');
// copy the read input's styles to the dummy input
copyNodeStyle(inputelm, meassureElm);
// set hard-coded styles needed for propper meassuring 
meassureElm.style.width = 'auto';
meassureElm.style.position = 'absolute';
meassureElm.style.left = '-9999px';
meassureElm.style.top = '-9999px';
meassureElm.style.whiteSpace = 'pre';
meassureElm.textContent = inputelm.value || '';
// add the meassure element to the body
document.body.appendChild(meassureElm);
return meassureElm;
}
return function(){
return createInputMeassureElm(this).offsetWidth;
}
})();
// delegated event binding
document.body.addEventListener('input', onInputDelegate)
function onInputDelegate(e){
if( e.target.classList.contains('autoSize') )
e.target.style.width = getInputValueWidth.call(e.target) + 'px';
}
input{ 
font-size:1.3em; 
padding:5px; 
margin-bottom: 1em;
}
input.type2{
font-size: 2.5em;
letter-spacing: 4px;
font-style: italic;
}
<input class="autoSize" value="type something">
<br>
<input class="autoSize type2" value="here too">
Run code snippetHide resultsExpand snippet
ShareShare a link to this answer Copy linkCC BY-SA 4.0
Improve this answer
Follow
Follow this answer to receive notifications
edited Jun 20 '20 at 9:12
Community♦
111 silver badge
answered May 16 '18 at 11:46
vsyncvsync
86.8k4545 gold badges245245 silver badges315315 bronze badges
0 
Add a comment
&nbsp;|&nbsp;
This answer is useful
0
This answer is not useful
Show activity on this post.
You would like to change the size attribute as the text changes.
# react
const resizeInput = (e) =&gt; {
e.target.setAttribute('size', e.target.value.length || 1);
}
<input onchange="{resizeInput}" size="{(propertyInput.current" &&="" propertyinput.current.value.length)="" ||="" 1}="" ref="{propertyInput}">
ShareShare a link to this answer Copy linkCC BY-SA 4.0
Improve this answer
Follow
Follow this answer to receive notifications
answered Dec 16 '20 at 10:16
GaldilGaldil
27922 silver badges88 bronze badges
Add a comment
&nbsp;|&nbsp;
This answer is useful
0
This answer is not useful
Show activity on this post.
The best solution is <input ...="" size="{input.value.length}">
ShareShare a link to this answer Copy linkCC BY-SA 4.0
Improve this answer
Follow
Follow this answer to receive notifications
answered Feb 20 at 12:00
EVGENY GLUKHOVEVGENY GLUKHOV
8011 silver badge33 bronze badges
Add a comment
&nbsp;|&nbsp;
This answer is useful
-1
This answer is not useful
Show activity on this post.
Why not using just css? 
<div id="wrapper">
<input onkeyup="keyup(event)">
<div id="ghost"></div>
</div>
function keyup(e) {
document.getElementById('ghost').innerText = e.target.value;
}
#wrapper {
position: relative;
min-width: 30px;
display: inline-block;
}
input {
position: absolute;
left:0;
right:0;
border:1px solid blue;
width: 100%;
}
#ghost {
color: transparent;
}
<div id="wrapper">
<input onkeyup="keyup(event)">
<div id="ghost"></div>
</div>
Run code snippetHide resultsExpand snippet
wrapper {
position: relative;
min-width: 30px;
border: 1px solid red;
display: inline-block;
}
input {
position: absolute;
left:0;
right:0;
width: 100%;
}
#ghost {
color: transparent;
}
this code was introduced by @Iain Todd to and I thought I should share it
ShareShare a link to this answer Copy linkCC BY-SA 3.0
Improve this answer
Follow
Follow this answer to receive notifications
answered Nov 21 '17 at 1:30
MiladMilad
22.7k99 gold badges6161 silver badges7676 bronze badges
1 
It's not just css. It's just another js method. Interesting one.
–&nbsp;vatavale
Feb 26 '18 at 6:20
Add a comment
&nbsp;|&nbsp;
Your Answer 
StackExchange.ifUsing("editor", function () {
StackExchange.using("externalEditor", function () {
StackExchange.using("snippets", function () {
StackExchange.snippets.init();
});
});
}, "code-snippets");
StackExchange.ready(function() {
var channelOptions = {
tags: "".split(" "),
id: "1"
};
initTagRenderer("".split(" "), "".split(" "), channelOptions);
StackExchange.using("externalEditor", function() {
// Have to fire editor after snippets, if snippets enabled
if (StackExchange.settings.snippets.snippetsEnabled) {
StackExchange.using("snippets", function() {
createEditor();
});
}
else {
createEditor();
}
});
function createEditor() {
StackExchange.prepareEditor({
useStacksEditor: false,
heartbeatType: 'answer',
autoActivateHeartbeat: false,
convertImagesToLinks: true,
noModals: true,
showLowRepImageUploadWarning: true,
reputationToPostImages: 10,
bindNavPrevention: true,
postfix: "",
imageUploader: {
brandingHtml: "Powered by \u003ca href=\"https://imgur.com/\"\u003e\u003csvg class=\"svg-icon\" width=\"50\" height=\"18\" viewBox=\"0 0 50 18\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"\u003e\u003cpath d=\"M46.1709 9.17788C46.1709 8.26454 46.2665 7.94324 47.1084 7.58816C47.4091 7.46349 47.7169 7.36433 48.0099 7.26993C48.9099 6.97997 49.672 6.73443 49.672 5.93063C49.672 5.22043 48.9832 4.61182 48.1414 4.61182C47.4335 4.61182 46.7256 4.91628 46.0943 5.50789C45.7307 4.9328 45.2525 4.66231 44.6595 4.66231C43.6264 4.66231 43.1481 5.28821 43.1481 6.59048V11.9512C43.1481 13.2535 43.6264 13.8962 44.6595 13.8962C45.6924 13.8962 46.1709 13.2535 46.1709 11.9512V9.17788Z\"/\u003e\u003cpath d=\"M32.492 10.1419C32.492 12.6954 34.1182 14.0484 37.0451 14.0484C39.9723 14.0484 41.5985 12.6954 41.5985 10.1419V6.59049C41.5985 5.28821 41.1394 4.66232 40.1061 4.66232C39.0732 4.66232 38.5948 5.28821 38.5948 6.59049V9.60062C38.5948 10.8521 38.2696 11.5455 37.0451 11.5455C35.8209 11.5455 35.4954 10.8521 35.4954 9.60062V6.59049C35.4954 5.28821 35.0173 4.66232 34.0034 4.66232C32.9703 4.66232 32.492 5.28821 32.492 6.59049V10.1419Z\" /\u003e\u003cpath fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M25.6622 17.6335C27.8049 17.6335 29.3739 16.9402 30.2537 15.6379C30.8468 14.7755 30.9615 13.5579 30.9615 11.9512V6.59049C30.9615 5.28821 30.4833 4.66231 29.4502 4.66231C28.9913 4.66231 28.4555 4.94978 28.1109 5.50789C27.499 4.86533 26.7335 4.56087 25.7005 4.56087C23.1369 4.56087 21.0134 6.57349 21.0134 9.27932C21.0134 11.9852 23.003 13.913 25.3754 13.913C26.5612 13.913 27.4607 13.4902 28.1109 12.6616C28.1109 12.7229 28.1161 12.7799 28.121 12.8346C28.1256 12.8854 28.1301 12.9342 28.1301 12.983C28.1301 14.4373 27.2502 15.2321 25.777 15.2321C24.8349 15.2321 24.1352 14.9821 23.5661 14.7787C23.176 14.6393 22.8472 14.5218 22.5437 14.5218C21.7977 14.5218 21.2429 15.0123 21.2429 15.6887C21.2429 16.7375 22.9072 17.6335 25.6622 17.6335ZM24.1317 9.27932C24.1317 7.94324 24.9928 7.09766 26.1024 7.09766C27.2119 7.09766 28.0918 7.94324 28.0918 9.27932C28.0918 10.6321 27.2311 11.5116 26.1024 11.5116C24.9737 11.5116 24.1317 10.6491 24.1317 9.27932Z\"/\u003e\u003cpath d=\"M16.8045 11.9512C16.8045 13.2535 17.2637 13.8962 18.2965 13.8962C19.3298 13.8962 19.8079 13.2535 19.8079 11.9512V8.12928C19.8079 5.82936 18.4879 4.62866 16.4027 4.62866C15.1594 4.62866 14.279 4.98375 13.3609 5.88013C12.653 5.05154 11.6581 4.62866 10.3573 4.62866C9.34336 4.62866 8.57809 4.89931 7.9466 5.5079C7.58314 4.9328 7.10506 4.66232 6.51203 4.66232C5.47873 4.66232 5.00066 5.28821 5.00066 6.59049V11.9512C5.00066 13.2535 5.47873 13.8962 6.51203 13.8962C7.54479 13.8962 8.0232 13.2535 8.0232 11.9512V8.90741C8.0232 7.58817 8.44431 6.91179 9.53458 6.91179C10.5104 6.91179 10.893 7.58817 10.893 8.94108V11.9512C10.893 13.2535 11.3711 13.8962 12.4044 13.8962C13.4375 13.8962 13.9157 13.2535 13.9157 11.9512V8.90741C13.9157 7.58817 14.3365 6.91179 15.4269 6.91179C16.4027 6.91179 16.8045 7.58817 16.8045 8.94108V11.9512Z\"/\u003e\u003cpath d=\"M3.31675 6.59049C3.31675 5.28821 2.83866 4.66232 1.82471 4.66232C0.791758 4.66232 0.313354 5.28821 0.313354 6.59049V11.9512C0.313354 13.2535 0.791758 13.8962 1.82471 13.8962C2.85798 13.8962 3.31675 13.2535 3.31675 11.9512V6.59049Z\" /\u003e\u003cpath d=\"M1.87209 0.400291C0.843612 0.400291 0 1.1159 0 1.98861C0 2.87869 0.822846 3.57676 1.87209 3.57676C2.90056 3.57676 3.7234 2.87869 3.7234 1.98861C3.7234 1.1159 2.90056 0.400291 1.87209 0.400291Z\" fill=\"#1BB76E\"/\u003e\u003c/svg\u003e\u003c/a\u003e",
contentPolicyHtml: "User contributions licensed under \u003ca href=\"https://stackoverflow.com/help/licensing\"\u003ecc by-sa\u003c/a\u003e \u003ca href=\"https://stackoverflow.com/legal/content-policy\"\u003e(content policy)\u003c/a\u003e",
allowUrls: true
},
onDemand: true,
discardSelector: ".discard-answer"
,immediatelyShowMarkdownHelp:true,enableTables:true,enableSnippets:true
});
}
});
Thanks for contributing an answer to Stack Overflow!Please be sure to answer the question. Provide details and share your research!But avoid …Asking for help, clarification, or responding to other answers.Making statements based on opinion; back them up with references or personal experience.To learn more, see our tips on writing great answers.
Draft saved
Draft discarded
Sign up or log in StackExchange.ready(function () { StackExchange.helpers.onClickDraftSave('#login-link');}); Sign up using Google Sign up using Facebook Sign up using Email and Password Submit Post as a guest
Name EmailRequired, but never shown 
StackExchange.ready(
function () {
StackExchange.openid.initPostLogin('.new-post-login', 'https%3a%2f%2fstackoverflow.com%2fquestions%2f3392493%2fadjust-width-of-input-field-to-its-input%23new-answer', 'question_page');
}
);
<h3 class="grid--cell fs-title">Post as a guest</h3>
<div class="grid--cell">
<div class="grid gs4 gsy fd-column">
<label class="s-label" for="display-name">Name</label>
<div class="grid ps-relative">
<input class="s-input" id="display-name" name="display-name" maxlength="30" type="text" value="" tabindex="105" placeholder="">
</div>
</div>
</div>
<div class="grid--cell">
<div class="grid gs4 gsy fd-column">
<div class="grid--cell">
<div class="grid gs2 gsy fd-column"><label class="grid--cell s-label" for="m-address">Email</label><p class="grid--cell s-description">Required, but never shown</p>
</div>
</div>
<div class="grid ps-relative">
<input class="s-input js-post-email-field" id="m-address" name="m-address" type="text" value="" size="40" tabindex="106" placeholder="">
</div>
</div>
</div>
Post Your Answer Discard By clicking “Post Your Answer”, you agree to our terms of service, privacy policy and cookie policy 
Not the answer you're looking for? Browse other questions tagged javascript html css or ask your own question. 
The Overflow Blog
Network protocols in orbit: Building a space-based ISP
Testing software so it’s reliable enough for space
Featured on Meta
Testing three-vote close and reopen on 13 network sites
We are switching to system fonts on May 10, 2021
Outdated Answers: flagging exercise begins today
Looking for a job?[All level] NodeJS Developer[All level] NodeJS DeveloperHo Chi Minh City, Vietnamjavascriptnode.jsdismiss this jobSenior Software Engineer (2nd Level Response &amp; Enablement) at Fintech in BerlinElinvar GmbHBerlin, GermanyRemoteRelocationjavapythondismiss this jobFront-end Developer VuejsCareSendNo office location$60k - $100kRemotevue.jsfirebasedismiss this jobFront-end Engineer (Full-Remote in Japan*)PayPay Corporation.Tokyo, Japan¥6210k - ¥15000kRemoteRelocationjavascriptnode.jsdismiss this jobFront-End Team LeaderApplancer JSCTân Bình, Vietnamjavascriptphpdismiss this jobDirector of Engineering (Full Stack); Leader, Mentor, Partner - work with us!Remixd MediaNo office location$80k - $130kRemotejavajavascriptdismiss this jobLead developer Go+AngularCELHo Chi Minh City, VietnamRemoteangularnode.jsdismiss this jobFront End DeveloperTalntNo office locationRemotejavascripthtmldismiss this jobView more jobs on Stack Overflow 
Linked
0
How to dynamically change (or at least shrink) the width of text input based on its value?
-1
How can I make responsive html table fields which are automatically filled in by user's input in an html form?
409
Creating a textarea with auto-resize
509
Calculate text width with JavaScript
17
Dynamically Adjust HTML Text Input Width to Content
18
Set / Copy javascript computed style from one element to another
26
Measuring text width/height without rendering
9
Make an <input> look like normal text in a paragraph
6
Scroll Width always returning undefined
5
Input size with letter spacing
See more linked questions
Related 2965 How do you disable browser autocomplete on web form field / input tags? 447 How can I make a TextArea 100% width without overflowing when padding is present in CSS? 2246 How can I make a div not larger than its contents? 1732 <button> vs. <input type="“button”">. Which to use? 938 HTML text input allow only numeric input 184 Can I stop 100% Width Text Boxes from extending beyond their containers? 753 HTML-encoding lost when attribute read from input field 2390 Disable/enable an input with jQuery? 1373 Font scaling based on width of container 
Hot Network Questions
How to prevent guns from working?
Would oceans filled with long-lived, omnivore, intelligent Krakens make sea travel impossible?
Wiring Ethernet through Telephone Cable
Receiving a certified letter and the contents is not address to you
Finding "chains" of numbers in a matrix
Is donating blood a mitzvah?
Is the Ubuntu community wiki entry on RootSudo current?
Why are "scales" mentioned less to singers and more to guitar players?
Logging off users with a countdown message
Replying to an inappropriate email by manager
When I buy a stock, should I track the bid price?
How to DM unlikely strength checks
How do I fix Outlook only showing the first line of every message?
How to attenuate an area light so that it falls off more rapidly than Quadratically
Rokugan's Light Cavalry
How to explain to my supervisor that her style of input is hindering my progress?
How do you say "under an angel's wing" in Latin?
How are we to understand Jesus' words in Matthew 7:21-23, and how do they apply to us today?
How to replace edges by gaps?
Why wouldn't a space fleet use their lasers for a precision strike?
In what Chinese fairy tale does a painter disappear into his own painting?
Causative passive form vs. Passive causative form: Both are grammatically possible, but is there a citation to prefer one over the other?
Match curly brace with new line
What carries the information for Pauli exclusion principle to occur?
Question feed
Subscribe to RSS Question feed
To subscribe to this RSS feed, copy and paste this URL into your RSS reader. 
StackExchange.ready(function(){$.get('/posts/3392493/ivc/b49c');});
<div><img src="./Get_set width of _input__files/b49c" class="dno" alt="" width="0" height="0"></div>default
;try{(function(a){function b(a){return'string'==typeof a?document.getElementById(a):a}function c(a){return a=b(a),!!a&amp;&amp;'none'===getComputedStyle(a).display}function d(a){return!c(a)}function e(a){return!!a}function f(a){return /^\s*$/.test(b(a).innerHTML)}function g(a){var b=a.style;b.height=b.maxHeight=b.minHeight='auto',b.display='none'}function h(a){var b=a.style;b.height=b.maxHeight=b.minHeight='auto',b.display='none',[].forEach.call(a.children,h)}function i(a){var b=a.style;b.height=b.maxHeight=b.minHeight='auto',b.removeProperty('display')}function j(a,b){var c;return function(){return a&amp;&amp;(c=a.call(b||this,arguments),a=null),c}}function k(a){var b=document.createElement('script');b.src=a,document.body.appendChild(b)}function l(a){return m([],a)}function m(a,b){return a.push=function(a){return b(),delete this.push,this.push(a)},a}function n(){try{return!new Function('return async()=&gt;{};')}catch(a){return!0}}function o(){return'undefined'!=typeof googletag&amp;&amp;!!googletag.apiReady}function p(){o()||(googletag={cmd:l(B)})}function q(){var a=document.createElement('div');a.className='adsbox',a.id='clc-abd',a.style.position='absolute',a.style.pointerEvents='none',a.innerHTML='&nbsp;',document.body.appendChild(a)}function r(){return Object.keys(F.ids).filter(function(a){return'clc-cpa'!=a})}function s(a){var b=a.split('_')[0],c=F.ids[b],d=F.slots[c];'function'==typeof d&amp;&amp;(d=d(b));return{path:'/'+C+'/'+E+'/'+c+'/'+D,sizes:d,zone:c}}function t(a){try{Array.isArray(clc.dfp.slotsRenderedEvents)||(clc.dfp.slotsRenderedEvents=[]),clc.dfp.slotsRenderedEvents.push(a);var b=a.slot.getSlotElementId(),c=[];b||c.push('id=0');var d=document.getElementById(b);if(!b||d?d.hasAttribute('data-clc-stalled')&amp;&amp;c.push('st=1'):c.push('el=0'),0!==c.length)return void G(c.join('&amp;'));var e=s(b),f=e.zone;if(clc.collapse&amp;&amp;clc.collapse[f]&amp;&amp;a.isEmpty)return h(d),void d.setAttribute('data-clc-ready','true');if(-1!==y.dh.indexOf(a.lineItemId))h(d);else if(a.lineItemId){d.setAttribute('data-clc-prefilled','true');var j=d.parentElement;if(j.classList.contains('js-zone-container')){g(j);var k=j.querySelectorAll('.js-report-ad-button-container'),l=k[0];switch(l.style.height='24px',b){case'dfp-tlb':case'dfp-tag':{j.classList.add('mb8');break}case'dfp-mlb':case'dfp-smlb':case'dfp-bmlb':{j.classList.add('my8');break}case'dfp-isb':{j.classList.add('mt24');break}case'dfp-m-aq':{j.classList.add('my12'),j.classList.add('mx-auto');break}default:}i(j),i(d)}else i(d);if('dfp-msb'==b){var m=document.getElementById('hireme');h(m)}}d.setAttribute('data-clc-ready','true')}catch(a){var n=document.querySelector('#dfp-tsb, #dfp-isb, #clc-tsb');n&amp;&amp;n.setAttribute('data-clc-ready','true'),G('e=1')}}function u(a,b){'dfp-isb'===a&amp;&amp;b.setTargeting('Sidebar',['Inline']),'dfp-tsb'===a&amp;&amp;b.setTargeting('Sidebar',['Right']);var c=s(a),d=c.path,e=c.sizes,f=c.zone,g=googletag.defineSlot(d,e,a);g.addService(b),!1;var h=a.split('_');if('clc-cpa'==h[0]&amp;&amp;h[1]){var i=h[1];g.setTargeting('talent-company-id',i)}}function v(b){var c=a.dfp&amp;&amp;a.dfp.targeting||{};'SystemDefault'===c.ProductVariant&amp;&amp;(window.matchMedia&amp;&amp;window.matchMedia('(prefers-color-scheme: dark)').matches?c.ProductVariant='Dark':c.ProductVariant='Light'),Object.keys(c).forEach(function(a){b.setTargeting(a,c[a])})}function w(a){var g=a.map(b).filter(e);return{eligible:g.filter(f).filter(d),ineligible:g.filter(c)}}function x(b){void 0===b&amp;&amp;(b=r());var c=['dfp-mlb','dfp-smlb'];if(!o())return p(),void googletag.cmd.push(function(){return x(b)});var d=w(b),e=d.eligible,f=d.ineligible;if(e.forEach(function(a){g(a)}),f.forEach(h),0!==e.length){y.abd&amp;&amp;q();var i=googletag.pubads().getSlots(),j=i.filter(function(a){return 0&lt;=b.indexOf(a.getSlotElementId())});googletag.destroySlots(j);var k=googletag.pubads();y.sf&amp;&amp;(k.setForceSafeFrame(!0),k.setSafeFrameConfig({allowOverlayExpansion:!0,allowPushExpansion:!0,sandbox:!0})),'undefined'!=typeof y.targeting_consent&amp;&amp;(k.setRequestNonPersonalizedAds(y.targeting_consent?0:1),!y.targeting_consent&amp;&amp;k.setPrivacySettings({limitedAds:!0})),y.ll||k.enableSingleRequest(),a.sreEvent||(k.addEventListener('slotRenderEnded',t),a.sreEvent=!0),v(k);var l=e.filter(function(a){return!y.ll||0&gt;c.indexOf(a.id)}),m=e.filter(function(a){return!!y.ll&amp;&amp;0&lt;=c.indexOf(a.id)});l.forEach(function(a){u(a.id,k),a.setAttribute('data-dfp-zone','true')}),googletag.enableServices(),l.forEach(function(a){googletag.display(a.id)}),y.ll&amp;&amp;(k.enableLazyLoad({fetchMarginPercent:0,renderMarginPercent:0}),m.forEach(function(a){u(a.id,k),a.setAttribute('data-clc-prefilled','true')}),m.forEach(function(a){googletag.display(a.id)}))}}var y=function(a){for(var b=[],c=1;c<arguments.length;c++)b[c-1]=arguments[c];for(var d,e="0,f=b;e&lt;f.length;e++)for(var" g="" in="" d="f[e],d)a[g]=d[g];return" a}({"lib":"https:="" cdn.sstatic.net="" clc="" clc.min.js?v="0e634710bdce&quot;,&quot;style&quot;:&quot;https://cdn.sstatic.net/clc/styles/clc.min.css?v=a49599567132&quot;,&quot;u&quot;:&quot;https://clc.stackoverflow.com/markup.js&quot;,&quot;wa&quot;:true,&quot;kt&quot;:2000,&quot;tto&quot;:true,&quot;h&quot;:&quot;clc.stackoverflow.com&quot;,&quot;allowed&quot;:&quot;^(((talent\\.)?stackoverflow)|(blog\\.codinghorror)|(serverfault|askubuntu)|([^\\.]+\\.stackexchange))\\.com$&quot;,&quot;wv&quot;:true,&quot;al&quot;:false,&quot;dh&quot;:[5171832659],&quot;abd&quot;:true},a.options||{}),z=j(function(){var" a="y.lib;n()&amp;&amp;(a=a.replace(/(\.min)?\.js(\?v=[0-9a-fA-F]+)?$/,&#39;.ie$1.js$2&#39;)),k(a)}),A=a.cmd||[];Array.isArray(A)&amp;&amp;(0&lt;A.length?z():m(A,z));var" b="j(function(){y.targeting_consent||&#39;undefined&#39;==typeof" y.targeting_consent?k('https:="" securepubads.g.doubleclick.net="" tag="" js="" gpt.js'):k('https:="" pagead2.googlesyndication.com="" gpt.js')}),c="248424177" ,d="/^\/tags\//.test(location.pathname)||/^\/questions\/tagged\//.test(location.pathname)?&#39;tag-pages&#39;:/^\/$/.test(location.pathname)||/^\/home/.test(location.pathname)?&#39;home-page&#39;:&#39;question-pages&#39;,E=location.hostname;var" f="{slots:{lb:[[728,90]],mlb:[[728,90]],smlb:[[728,90]],bmlb:[[728,90]],sb:function(a){return&#39;dfp-tsb&#39;===a?[[300,250],[300,600]]:[[300,250]]},&quot;tag-sponsorship&quot;:[[730,135]],&quot;mobile-below-question&quot;:[[320,50],[300,250]],msb:[[300,250],[300,600]],&quot;talent-conversion-tracking&quot;:[[1,1]]},ids:{&quot;dfp-tlb&quot;:&#39;lb&#39;,&quot;dfp-mlb&quot;:&#39;mlb&#39;,&quot;dfp-smlb&quot;:&#39;smlb&#39;,&quot;dfp-bmlb&quot;:&#39;bmlb&#39;,&quot;dfp-tsb&quot;:&#39;sb&#39;,&quot;dfp-isb&quot;:&#39;sb&#39;,&quot;dfp-tag&quot;:&#39;tag-sponsorship&#39;,&quot;dfp-msb&quot;:&#39;msb&#39;,&quot;dfp-m-aq&quot;:&#39;mobile-below-question&#39;,&quot;clc-tlb&quot;:&#39;lb&#39;,&quot;clc-mlb&quot;:&#39;mlb&#39;,&quot;clc-tsb&quot;:&#39;sb&#39;,&quot;clc-cpa&quot;:&#39;talent-conversion-tracking&#39;}},G=function(a){new" image().src="https://" +y.h+'="" stalled.gif?'+a};(function(){var="" a.load()})})(),p(),a.dfp="{load:x},a.options=y,a.cmd=A})(this.clc=this.clc||{})}catch(a){window.console.error(a)}" var="" ||="" {};="" clc.collapse="{" sb:="" !0,="" 'tag-sponsorship':="" lb:="" mlb:="" smlb:="" bmlb:="" 'mobile-below-question':="" !0="" };="" clc.options="clc.options" clc.options.sf="!0;" clc.options.hb="!1;" clc.options.ll="!0;" clc.options.targeting_consent="!0;" clc.options.performance_consent="!0;" clc.cmd="clc.cmd" [];="" clc.cmd.push(function="" ()="" {="" window.clc_request="A9ypO0vrFdkIAAAAAO3DMwACAAAAAgAAAAABFQAAAHxqYXZhc2NyaXB0fGh0bWx8Y3NzfADvh0cRDPue4XrF" ;="" clc.load();="" });="" clc.dfp="clc.dfp" clc.dfp.targeting="{Registered:[&#39;false&#39;],&#39;so-tag&#39;:[&#39;javascript&#39;,&#39;html&#39;,&#39;css&#39;],&#39;tag-reportable&#39;:[&#39;javascript&#39;,&#39;html&#39;,&#39;css&#39;],&#39;tag-non-reportable&#39;:[&#39;javascript&#39;,&#39;html&#39;,&#39;css&#39;],NumberOfAnswers:[&#39;20-plus&#39;]};" clc.dfp.targeting.targetingconsent="[&#39;true&#39;];" const="" urlparams="new" urlsearchparams(window.location.search);="" if="" (urlparams.has('dfptestads'))="" dfptestads="urlParams.get(&#39;dfptestads&#39;);" clc.dfp.targeting.dfptestads="dfptestads;" }="" googletag="googletag" googletag.cmd="googletag.cmd" googletag.cmd.push(function="" clc.dfp.load();="" stackexchange.ready(function="" stackexchange.ads.init(googletag,="" '="" ads="" report-ad',="" 'report="" this="" ad')="" })="" stack="" overflow="" questions="" jobs="" developer="" directory="" salary="" calculator="" help="" mobile="" disable="" responsiveness="" products="" teams="" talent="" advertising="" enterprise="" company="" about="" press="" work="" here="" legal="" privacy="" policy="" terms="" of="" service="" contact="" us="" cookie="" settings="" exchange="" network="" technology="" life="" arts="" culture="" recreation="" science="" other="" server="" fault="" super="" user="" web="" applications="" ask="" ubuntu="" webmasters="" game="" development="" tex="" -="" latex="" software="" engineering="" unix="" &="" linux="" different="" (apple)="" wordpress="" geographic="" information="" systems="" electrical="" android="" enthusiasts="" security="" database="" administrators="" drupal="" answers="" sharepoint="" experience="" mathematica="" salesforce="" expressionengine®="" em="" português="" blender="" cryptography="" code="" review="" magento="" recommendations="" signal="" processing="" emacs="" raspberry="" pi="" на="" русском="" golf="" en="" español="" ethereum="" data="" arduino="" bitcoin="" quality="" assurance="" testing="" sound="" design="" windows="" phone="" more="" (28)="" photography="" fiction="" fantasy="" graphic="" movies="" tv="" music:="" practice="" theory="" worldbuilding="" video="" production="" seasoned="" advice="" (cooking)="" home="" improvement="" personal="" finance="" money="" academia="" law="" physical="" fitness="" gardening="" landscaping="" parenting="" (10)="" english="" language="" usage="" skeptics="" mi="" yodeya="" (judaism)="" travel="" christianity="" learners="" japanese="" chinese="" french="" german="" biblical="" hermeneutics="" history="" spanish="" islam="" Русский="" язык="" russian="" arqade="" (gaming)="" bicycles="" role-playing="" games="" anime="" manga="" puzzling="" motor="" vehicle="" maintenance="" repair="" board="" card="" bricks="" homebrewing="" martial="" the="" great="" outdoors="" poker="" chess="" sports="" (16)="" mathoverflow="" mathematics="" cross="" validated="" (stats)="" theoretical="" computer="" physics="" chemistry="" biology="" philosophy="" linguistics="" psychology="" neuroscience="" computational="" meta="" apps="" api="" blog="" facebook="" twitter="" linkedin="" instagram="" site="" logo="" ©="" 2021="" inc;="" contributions="" licensed="" under="" cc="" by-sa.="" rev 2021.5.12.39277="" stackexchange.responsiveness.addswitcher();="" <div="" id="noscript-warning">Stack Overflow works best with JavaScript enabled
<img src="./Get_set width of _input__files/p-c1rF4kxgLUzNc.gif" alt="" class="dno">
(function(i, s, o, g, r, a, m) {
i['GoogleAnalyticsObject'] = r; i[r] = i[r] || function() { (i[r].q = i[r].q || []).push(arguments) }, i[r].l = 1 * new Date(); a = s.createElement(o),
m = s.getElementsByTagName(o)[0]; a.async = 1; a.src = g; m.parentNode.insertBefore(a, m);
})(window, document, 'script', 'https://www.google-analytics.com/analytics.js', 'ga');
StackExchange.ready(function () {
StackExchange.ga.init({
autoLink: ["stackoverflow.blog","info.stackoverflowsolutions.com","stackoverflowsolutions.com"],
sendTitles: true,
tracker: window.ga,
trackingCodes: [
'UA-108242619-1'
],
checkDimension: 'dimension42'
});
StackExchange.ga.setDimension('dimension2', '|javascript|html|css|');
StackExchange.ga.setDimension('dimension3', 'Questions/Show');
StackExchange.ga.trackPageView();
});
var _qevents = _qevents || [],
_comscore = _comscore || [];
(function() {
var s = document.getElementsByTagName('script')[0],
qc = document.createElement('script');
qc.async = true;
qc.src = 'https://secure.quantserve.com/quant.js';
s.parentNode.insertBefore(qc, s);
_qevents.push({ qacct: "p-c1rF4kxgLUzNc" }); var sc = document.createElement('script');
sc.async = true;
sc.src = 'https://sb.scorecardresearch.com/beacon.js';
s.parentNode.insertBefore(sc, s);
_comscore.push({ c1: "2", c2: "17440561" }); })();
&nbsp;
&nbsp;
</arguments.length;c++)b[c-1]=arguments[c];for(var></button></span></canvas></span></span></span></body></html>